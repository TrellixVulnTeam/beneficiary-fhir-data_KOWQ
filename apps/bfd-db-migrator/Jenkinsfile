pipeline {
    agent {
        kubernetes {
        yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: bfd
  restartPolicy: Never
  containers:
  - name: bfd-db-migrator-deployment
    image: public.ecr.aws/c2o1d8s9/bfd-cbc-build:jdk11-mvn3-an29-tf12
    command: ['cat']
    tty: true
"""
        }
    }
    parameters {
        string(name: 'migratorAMI', defaultValue: '', description: 'bfd-db-migrator AMI')
        string(name: 'branchName', defaultValue: '', description: 'branch to build')
        string(name: 'environmentId', defaultValue: '', description: 'deployment target environment')
    }
    stages {
        stage('Prepare bfd-db-migrator deployment'){
            steps {
                script {
                    container('bfd-db-migrator-deployment') {
                        sh '''
                        git clone --depth 1 --branch ${branchName} --single-branch https://github.com/CMSgov/beneficiary-fhir-data.git bfd
                        '''
                    }
                }
            }
        }
        stage('Deploy bfd-db-migrator') {
            steps {
                script {
                    container('bfd-db-migrator-deployment') {
                        withEnv(['AWS_ACCESS_KEY_ID=','AWS_SECRET_ACCESS_KEY=','AWS_SESSION_TOKEN=']) {
                            withCredentials([string(credentialsId: 'bfd-aws-assume-role', variable: 'awsAssumeRole')]) {
                                awsCredentials = sh(returnStdout: true, script: 'aws sts assume-role --role-arn "$awsAssumeRole" --role-session-name "jenkins-${JOB_NAME}" --output text --query Credentials').trim().split(/\s+/)
                                env.AWS_DEFAULT_REGION = 'us-east-1'
                                env.AWS_ACCESS_KEY_ID = awsCredentials[0]
                                env.AWS_SECRET_ACCESS_KEY = awsCredentials[2]
                                env.AWS_SESSION_TOKEN = awsCredentials[3]
                            }
                        }
                        dir("${workspace}/ops/terraform/env/${environmentId}/stateless") {
                                sh "pwd"
                                //// Debug output terraform version
                                sh "echo terraform --version"

                                //// Initilize terraform
                                sh "echo terraform init -no-color"

                                // Gathering terraform plan
                                echo "Timestamp: ${java.time.LocalDateTime.now().toString()}"
                                // TODO: BFD-1600 ensure the amiIds.bfdDbMigrator is leveraged for the the forthcoming terraform definition
                                sh "echo terraform plan \
                                -target todo.todo.todo.todo \
                                -var='migrator_ami=${migratorAMI}' \
                                -no-color -out=tfplan"

                                echo "Timestamp: ${java.time.LocalDateTime.now().toString()}"
                                sh "echo terraform apply \
                                -no-color -input=false tfplan"
                                echo "Timestamp: ${java.time.LocalDateTime.now().toString()}"
                        }
                    }
                }
            }
        }
    }
}
